#include <stdio.h>
#include <math.h>
#include <stdlib.h>
//#include "platform.h"
//#include "xil_prinf.h"
#include "xparameters.h"
#include "xil_printf.h"
#include "xllfifo.h"

#include "xintc.h"
#include "iic.h"
#include "audio.h"
#include "test_input.h"

#include "main.h"
#include "intc.h"
#include "fonts.h"
#include "mcufont.h"

#define AMPLITUDE 1000 // Volume of generated audio
#define MCLK 10000000
#define SAMPLE_RATE 39062 // Sample rate for both mic in and speaker out

#define FILTER_DISTANCE 10 // Check samples this far away
#define FILTER_COUNT 3     // Must have this many matches within FILTER_FREQ_RANGE
#define FILTER_FREQ_RANGE 50 // Range within which frequencies must be in for filtering

#define VOLUME_MULTIPLIER_MAX 256

// Number of samples accepted by cepstrum module for one run
#define CEPSTRUM_INPUT_SAMPLES 1024

// Threshold for volume to detect pitch
#define VOLUME_THRESHOLD_SHIFT 14

// Size of sample "history buffer" to use for calculating volume
#define VOLUME_BUF_SIZE (SAMPLE_RATE / CEPSTRUM_INPUT_SAMPLES)


// Keep these the same as in the pitch graph verilog
#define PITCH_GRAPH_MIN_FREQUENCY 100
#define PITCH_GRAPH_MAX_FREQUENCY 1024
#define PITCH_GRAPH_NO_VALUE (PITCH_GRAPH_MIN_FREQUENCY - 1)

// Objects representing AXI components we can interface with
static XIntc sIntc;
static XIic sIic;
XLlFifo audio_out_fifo, audio_in_fifo, cepstrum_fifo, video_pitch_fifo, keyboard_input_fifo;

// Button handling
volatile unsigned int *buttons = (unsigned int*)XPAR_AXI_GPIO_0_BASEADDR;
unsigned int buttons_pressed;
unsigned int last_buttons = 0;

// LEDs
volatile unsigned int *leds = (unsigned int*)(XPAR_AXI_GPIO_0_BASEADDR + 8);

// Other
int video_mode = 0; // 0: Waveform, 1: Pitch graph
volatile int is_recording = 0;
volatile int playback_active = 0;

// Interrupt vectors
const ivt_t ivt[] = {
		{XPAR_AXI_INTC_0_AXI_IIC_0_IIC2INTC_IRPT_INTR, (XInterruptHandler)XIic_InterruptHandler, &sIic},
		{XPAR_AXI_INTC_0_CEPSTRUM_PITCH_DETEC_0_INTERRUPT_INTR, (XInterruptHandler)cepstrum_interrupt_handler, NULL},
		{XPAR_AXI_INTC_0_AXI_FIFO_MM_S_1_INTERRUPT_INTR, (XInterruptHandler)audio_input_interrupt_handler, NULL},
};

// Audio recording & playback variables
volatile int cepstrumArray[1000]; // Array of recorded pitch values (should match pitch graph data)
volatile int filteredCepstrumArray[1000]; // Like above with filter applied
volatile int pitch_record_index = 0; // Next index in cepstrumArray to record at
volatile int pitch_sent_index = 0;   // Next index in filteredCepstrumArray to send to pitch graph module
volatile int pitch_playback_index = 0; // Next index in cepstrumArray to play back
volatile int samples_played_this_pitch = 0; // Number of samples that have been played within the current pitch value (each lasts for CEPSTRUM_INPUT_SAMPLES samples)

s16 cepstrum_buffer_0[CEPSTRUM_INPUT_SAMPLES], cepstrum_buffer_1[CEPSTRUM_INPUT_SAMPLES];
s16 *cepstrum_input_buffer = cepstrum_buffer_0;
s16 *cepstrum_send_buffer = cepstrum_buffer_1;
int cepstrum_input_buffer_pos = 0;
int cepstrum_send_buffer_ready = 0;

// Amount to multiply input samples by (for processing).
int volume_multiplier = 1;
// Amount to reduce headphone output volume by.
int output_volume_divider = 8;


// Variables relating to determining volume over time
int volume_buf[VOLUME_BUF_SIZE];
int volume_buf_pos = 0;
int volume_sum = 0;
int volume = 0;

void halt_recording()
{
	if (is_recording)
	{
		is_recording = 0;
		Xil_Out32(XPAR_PITCH_ANALYZER_VIDEO_0_BASEADDR + 4, 0); // Ctrl register: Don't show recording cursor
	}
}

void halt_playback()
{
	if (playback_active)
	{
		playback_active = 0;
		Xil_Out32(XPAR_PITCH_ANALYZER_VIDEO_0_BASEADDR + 12, 0xffff); // Don't show playback cursor
	}
}

// Apply a very basic filter over the recorded pitch history to clean up outlier values.
void update_filtered_pitch_history()
{
	int last_recorded_index = pitch_record_index - 1;

	while (pitch_sent_index <= last_recorded_index - FILTER_COUNT) // TODO
	{
		int match_count = 0;
		int freq = cepstrumArray[pitch_sent_index];
		for (int i=pitch_sent_index-FILTER_COUNT; i<=pitch_sent_index+FILTER_COUNT; i++)
		{
			if (i < 0 || i > last_recorded_index)
				continue;
			if (abs(freq - cepstrumArray[i]) < FILTER_FREQ_RANGE)
				match_count++;

			if (match_count >= FILTER_COUNT)
				filteredCepstrumArray[pitch_sent_index] = freq;
			else
				filteredCepstrumArray[pitch_sent_index] = 0;
			pitch_sent_index++;
		}
	}

	video_send_pitch(filteredCepstrumArray[pitch_record_index-1]);
}

// Called when the pitch detector finishes processing a batch of samples and has a result
void cepstrum_interrupt_handler()
{
	// Clear the interrupt
	Xil_Out32(XPAR_CEPSTRUM_PITCH_DETEC_0_BASEADDR + 8, 0x01);

	// Read the frequency
	int detected_frequency = SAMPLE_RATE / Xil_In32(XPAR_CEPSTRUM_PITCH_DETEC_0_BASEADDR);

	// Ignore the frequency if it isn't loud enough
	if (!(volume >> VOLUME_THRESHOLD_SHIFT))
		detected_frequency = 0;

	// Doing printf here can cause problems because we're in an interrupt and other interrupts won't trigger.
	// So be careful if uncommenting this.
	//xil_printf("CEPSTRUM INTERRUPT: Frequency = %d\n", detected_frequency);

	// Check video module status bit 1 (finished displaying graph)
	if (!(Xil_In32(XPAR_PITCH_ANALYZER_VIDEO_0_BASEADDR + 8) & 1))
	{
		cepstrumArray[pitch_record_index++] = detected_frequency;
		update_filtered_pitch_history();
	}
	else
	{
		// Recording finished (this may execute more than once)
		halt_recording();
	}

	// Show on LEDs
	//*leds = detected_frequency >> 4;
}

void swap_cepstrum_buffers()
{
	s16 *tmp = cepstrum_input_buffer;
	cepstrum_input_buffer = cepstrum_send_buffer;
	cepstrum_send_buffer = tmp;
	cepstrum_send_buffer_ready = 1;
	cepstrum_input_buffer_pos = 0;
}

void clear_cepstrum_buffers()
{
	cepstrum_input_buffer_pos = 0;
	cepstrum_send_buffer_ready = 0;
}

// Handle all data in the audio input FIFO buffer.
void process_audio_input(int disable_interrupts)
{
	static int processing_audio_input = 0;

	if (disable_interrupts)
		microblaze_disable_interrupts();
	if (!processing_audio_input)
	{
		processing_audio_input = 1;
		while (XLlFifo_iRxOccupancy(&audio_in_fifo) > 0)
		{
			s16 l, r;
			adau1761_i2s_read(&l, &r);

			// Forward audio input directly to speakers
			if (!playback_active)
				adau1761_i2s_write(l, r);

			s16 sample = l * volume_multiplier;

			// If recording in progress, process sample with cepstrum pitch detector
			if (is_recording)
			{
				cepstrum_input_buffer[cepstrum_input_buffer_pos++] = sample;
				if (cepstrum_input_buffer_pos == CEPSTRUM_INPUT_SAMPLES)
				{
					swap_cepstrum_buffers();
				}
			}

			// Update the detected volume using the "root mean square"... but without the square root cause it's slow.
			volume_sum -= volume_buf[volume_buf_pos];
			volume_sum += sample * sample;
			volume_buf[volume_buf_pos] = sample * sample;
			volume_buf_pos = (volume_buf_pos+1) % VOLUME_BUF_SIZE;

			volume = volume_sum / VOLUME_BUF_SIZE;
			*leds = volume >> (VOLUME_THRESHOLD_SHIFT - 2);
		}

		processing_audio_input = 0;
	}
	if (disable_interrupts)
		microblaze_enable_interrupts();
}

// Interrupt occurs when audio input FIFO buffer is nearly full.
void audio_input_interrupt_handler()
{
	//xil_printf("Audio input interrupt!\n");
	XLlFifo_IntClear(&audio_in_fifo, XLLF_INT_RFPF_MASK);
	process_audio_input(0);
}

// Read an audio sample from the mic / line in
void adau1761_i2s_read(s16 *left, s16 *right)
{
	while (XLlFifo_iRxOccupancy(&audio_in_fifo) == 0);
	XLlFifo_iRxGetLen(&audio_in_fifo);
	u32 word = XLlFifo_RxGetWord(&audio_in_fifo);

	// Some kind of off-by-one error in our verilog I2S module means that we must ignore the
	// highest bit of the sample, hence the shift left by one.
	*left = (word >> 16) << 1;
	*right = (word & 0xffff) << 1;
}

// Write an audio sample to the speaker / line out.
// Must ensure there's space in the FIFO before calling!
void adau1761_i2s_write(s16 left, s16 right) {
	/*
	while ( !XLlFifo_iTxVacancy(&audio_out_fifo) ) {
		// Printing to serial takes too many cycles
		//xil_printf("I2S FIFO full. Waiting ... \n\r");
	}
	*/
	left /= output_volume_divider;
	right /= output_volume_divider;
	XLlFifo_TxPutWord(&audio_out_fifo, (u32)(((left & 0xffff) << 16) | (right & 0xffff)));
	XLlFifo_iTxSetLen(&audio_out_fifo, 4);
}

// Send sample, as a float encoded IEE754 format
void cepstrum_send_sample_u32(u32 sample)
{
	while ( !XLlFifo_iTxVacancy(&cepstrum_fifo) );
	XLlFifo_TxPutWord(&cepstrum_fifo, sample);
	XLlFifo_iTxSetLen(&cepstrum_fifo, 4);
}

void cepstrum_send_sample_float(float sample)
{
	u32 *val = (u32*)&sample;
	//xil_printf("%d\n", *val);
	cepstrum_send_sample_u32(*val);
}

// Unlike cepstrum, the video module takes samples as s16 numbers.
void video_send_pitch(s16 pitch)
{
	if (pitch < PITCH_GRAPH_MIN_FREQUENCY || pitch > PITCH_GRAPH_MAX_FREQUENCY)
		pitch = PITCH_GRAPH_NO_VALUE;
	while ( !XLlFifo_iTxVacancy(&video_pitch_fifo) );
	XLlFifo_TxPutWord(&video_pitch_fifo, pitch);
	XLlFifo_iTxSetLen(&video_pitch_fifo, 4);
}

// Send sample data for testing cepstrum
void send_cepstrum_samples() {
	for (int i=0; i<CEPSTRUM_INPUT_SAMPLES; i++)
	{
		cepstrum_send_sample_u32(cepstrum_input_floats[i]);
	}
}

// This fails to read all 1024 samples for some reason? It usually hangs at a certain point.
void receive_cepstrum_output() {
	for (int total=0; total<CEPSTRUM_INPUT_SAMPLES;)
	{
		while (XLlFifo_iRxOccupancy(&cepstrum_fifo) == 0);
		//int recvWords = XLlFifo_iRxGetLen(&cepstrum_fifo) / 4;
		u32 word = XLlFifo_RxGetWord(&cepstrum_fifo);
		xil_printf("%u\n", word);
		total++;
	}
}

#define NUM_KEYS 0x80

// Array of bools, each entry is "1" if the key is set.
u8 keysHeld[NUM_KEYS];
u8 keysHeldLastFrame[NUM_KEYS];
// Array of keys pressed this frame
u8 keysPressed[NUM_KEYS];

enum KeyCodes
{
	KEY_SPACE = 0x29,
	KEY_ENTER = 0x5a,
	KEY_0 = 0x45,
	KEY_1 = 0x16,
	KEY_2 = 0x1e,
	KEY_UP = 0x75,
	KEY_DOWN = 0x72,
	KEY_LEFT = 0x6b,
	KEY_RIGHT = 0x74,
	KEY_NUMPAD_0 = 0x70,

	KEY_OPEN_SQ_BRACKET = 0x54,
	KEY_CLOSE_SQ_BRACKET = 0x5b,
};

// Check button input
void update_buttons()
{
	// Buttons on board
	buttons_pressed = (*buttons ^ last_buttons) & *buttons;
	last_buttons = *buttons;

	// Handle keyboard input
	while (XLlFifo_iRxOccupancy(&keyboard_input_fifo) != 0)
	{
		//int recvWords = XLlFifo_iRxGetLen(&keyboard_input_fifo) / 4;
		u16 word = XLlFifo_RxGetWord(&keyboard_input_fifo);
		xil_printf("KEYPRESS: %x\n", word);

		if ((word >> 8) < NUM_KEYS)
		{
			// Key down
			int key = word & 0xff;
			if (key < NUM_KEYS)
				keysHeld[key] = 1;
		}
		else if ((word & 0xff00) == 0xf000)
		{
			// Key released
			int key = word & 0xff;
			if (key < NUM_KEYS)
				keysHeld[key] = 0;
		}
	}

	for (int i=0; i<NUM_KEYS; i++)
	{
		keysPressed[i] = !keysHeldLastFrame[i] && keysHeld[i];
		keysHeldLastFrame[i] = keysHeld[i];
	}
}

// Generates samples for playback of audio, enough to fill up the audio output FIFO buffer.
void generate_playback_samples() {
    while (XLlFifo_iTxVacancy(&audio_out_fifo) > 0)
    {
    	if (pitch_playback_index >= pitch_record_index)
    	{
    		halt_playback();
    		return;
    	}

        int frequency = filteredCepstrumArray[pitch_playback_index];
        int period = SAMPLE_RATE/frequency;

        int i = samples_played_this_pitch;
		// Generate sine wave sample
//            double theta = 2.0 * M_PI * i/period;
//            int16_t sample = (int16_t)(AMPLITUDE * sin(theta));
		int16_t sample;
		if (i%period > period/2) {
			sample = AMPLITUDE;
		}
		else {
			sample = -AMPLITUDE;
		}
//            xil_printf("audio sample %d\n", sample);

		// Write to both left and right channels
		adau1761_i2s_write(sample, sample);

		samples_played_this_pitch++;
		if (samples_played_this_pitch == CEPSTRUM_INPUT_SAMPLES)
		{
			pitch_playback_index++;
			samples_played_this_pitch = 0;

			// Update cursor position in pitch graph
			Xil_Out32(XPAR_PITCH_ANALYZER_VIDEO_0_BASEADDR + 12, pitch_playback_index);
		}
    }
}

u16 input_samples[1024];

int main(){
	int Status;

	memset(keysHeld, 0, sizeof(keysHeld));
	memset(keysPressed, 0, sizeof(keysPressed));
	memset(volume_buf, 0, sizeof(volume_buf));
	memset(cepstrumArray, 0, sizeof(cepstrumArray));
	memset(filteredCepstrumArray, 0, sizeof(filteredCepstrumArray));

	*leds = 0xffffffff;

	// I2C
	Status = fnInitIic(&sIic);
	if(Status != XST_SUCCESS) {
		xil_printf("Error initializing I2C controller");
		return XST_FAILURE;
	}

	// Interrupts
	Status = fnInitInterruptController(&sIntc);
	if(Status != XST_SUCCESS) {
		xil_printf("Error initializing interrupts");
		return XST_FAILURE;
	}

	// Start the interrupt controller
	fnEnableInterrupts(&sIntc, &ivt[0], sizeof(ivt)/sizeof(ivt[0]));


	// I2S FIFO
	XLlFifo_Config *pConfig = XLlFfio_LookupConfig(XPAR_AXI_FIFO_MM_S_0_DEVICE_ID);
	Status = XLlFifo_CfgInitialize(&audio_out_fifo, pConfig, pConfig->BaseAddress);
	if(XST_SUCCESS != Status) {
		xil_printf("Error initializing Output FIFO");
		return XST_FAILURE;
	}
	pConfig = XLlFfio_LookupConfig(XPAR_AXI_FIFO_MM_S_1_DEVICE_ID);
	Status = XLlFifo_CfgInitialize(&audio_in_fifo, pConfig, pConfig->BaseAddress);
	if(XST_SUCCESS != Status) {
		xil_printf("Error initializing Input FIFO");
		return XST_FAILURE;
	}

	// Cepstrum FIFO
	pConfig = XLlFfio_LookupConfig(XPAR_AXI_FIFO_MM_S_2_DEVICE_ID);
	Status = XLlFifo_CfgInitialize(&cepstrum_fifo, pConfig, pConfig->BaseAddress);
	if(XST_SUCCESS != Status) {
		xil_printf("Error initializing Cepstrum FIFO");
		return XST_FAILURE;
	}

	// Video pitch FIFO
	pConfig = XLlFfio_LookupConfig(XPAR_AXI_FIFO_MM_S_3_DEVICE_ID);
	Status = XLlFifo_CfgInitialize(&video_pitch_fifo, pConfig, pConfig->BaseAddress);
	if(XST_SUCCESS != Status) {
		xil_printf("Error initializing video pitch FIFO");
		return XST_FAILURE;
	}

	// Keyboard input FIFO
	pConfig = XLlFfio_LookupConfig(XPAR_AXI_FIFO_MM_S_5_DEVICE_ID);
	Status = XLlFifo_CfgInitialize(&keyboard_input_fifo, pConfig, pConfig->BaseAddress);
	if(XST_SUCCESS != Status) {
		xil_printf("Error initializing keyboard input FIFO");
		return XST_FAILURE;
	}


	// Enable interrupts for audio input fifo
	XLlFifo_IntEnable(&audio_in_fifo, XLLF_INT_RFPF_MASK);

	fnInitAudio();
	fnSetHpOutput();
	//fnSetLineOutput();
	//fnSetMicInput();
	fnSetLineInput();

	xil_printf("Initialization OK\n");

	// Send hardcoded "demo" samples (these are at a sample rate of 44100Hz, different from what the codec is using)
    //send_cepstrum_samples();

	// This is broken
    //receive_cepstrum_output();

	// Set some initial values for our custom verilog modules
	Xil_Out32(XPAR_PITCH_ANALYZER_VIDEO_0_BASEADDR + 0, video_mode); // Set initial video mode
	Xil_Out32(XPAR_PITCH_ANALYZER_VIDEO_0_BASEADDR + 4, 1); // Reset pitch graph
	Xil_Out32(XPAR_PITCH_ANALYZER_VIDEO_0_BASEADDR + 12, 0xffff); // Disable pitch graph playback cursor

	// Infinite loop
	for (;;)
	{
		update_buttons();

		//process_audio_input(1);

		// Handle audio output. Must call this frequently enough for output buffer to always be filled up.
		if (playback_active)
		{
			generate_playback_samples();
		}

		if (cepstrum_send_buffer_ready)
		{
			for (int i=0; i<CEPSTRUM_INPUT_SAMPLES; i++)
				cepstrum_send_sample_float((float)(s16)cepstrum_input_buffer[i]);
			cepstrum_send_buffer_ready = 0;
		}

		// Switch video output mode
		int pitch_graph_visible = video_mode == 1;
		if (keysPressed[KEY_SPACE] || ((buttons_pressed) & BTNC))
		{
			video_mode ^= 1;
			Xil_Out32(XPAR_PITCH_ANALYZER_VIDEO_0_BASEADDR, video_mode);
		}

		if (pitch_graph_visible)
		{
			// Begin/pause recording
			if (((buttons_pressed & BTNU) || keysPressed[KEY_ENTER]) && !playback_active)
			{
				if (is_recording)
				{
					halt_recording();
				}
				else
				{
					// Reset pitch graph, recording history, begin anew
					pitch_record_index = 0;
					pitch_sent_index = 0;
					clear_cepstrum_buffers();
					Xil_Out32(XPAR_PITCH_ANALYZER_VIDEO_0_BASEADDR + 4, 3); // Ctrl register: Reset graph, show cursor
					is_recording = 1;
				}
			}

			// Begin/pause playback
			if (keysPressed[KEY_1] && !is_recording)
			{
				if (playback_active)
				{
					halt_playback();
				}
				else
				{
					pitch_playback_index = 0;
					samples_played_this_pitch = 0;
					playback_active = 1;
				}
			}
		}

		// Switching input source
		if ((buttons_pressed) & BTNL)
			fnSetLineInput();
		else if ((buttons_pressed) & BTNR)
			fnSetMicInput();

		// Volume multiplier (for internal processing)
		int volume_multiplier_changed = 0;
		if (keysPressed[KEY_UP])
		{
			if (volume_multiplier < VOLUME_MULTIPLIER_MAX)
			{
				volume_multiplier_changed = 1;
				volume_multiplier *= 2;
			}
			xil_printf("Volume multiplier: %d\n", volume_multiplier);
		}
		if (keysPressed[KEY_DOWN])
		{
			if (volume_multiplier > 1)
			{
				volume_multiplier_changed = 1;
				volume_multiplier /= 2;
			}
			xil_printf("Volume multiplier: %d\n", volume_multiplier);
		}

		if (volume_multiplier_changed)
		{
			// Inform the video module of the new multiplier (affects waveform output)
			Xil_Out32(XPAR_PITCH_ANALYZER_VIDEO_0_BASEADDR + 16, volume_multiplier);
		}

		// Volume divider (for headphone output)
		if (keysPressed[KEY_OPEN_SQ_BRACKET])
		{
			if (output_volume_divider < VOLUME_MULTIPLIER_MAX)
				output_volume_divider *= 2;
			xil_printf("Output volume divider: %d\n", output_volume_divider);
		}
		if (keysPressed[KEY_CLOSE_SQ_BRACKET])
		{
			if (output_volume_divider > 1)
				output_volume_divider /= 2;
			xil_printf("Output volume divider: %d\n", output_volume_divider);
		}
	}

    // Infinite loop: Forward audio input to output
    for(;;) {
		s16 l, r;
		adau1761_i2s_read(&l, &r);
		adau1761_i2s_write(l, r);
    }

	return 0;
}
