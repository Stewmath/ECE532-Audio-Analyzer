#include <stdio.h>
#include <math.h>
//#include "platform.h"
//#include "xil_prinf.h"
#include "xparameters.h"
#include "xil_printf.h"
#include "xllfifo.h"

#include "xintc.h"
#include "iic.h"
#include "audio.h"
#include "test_input.h"

#include "intc.h"
#include "fonts.h"
#include "mcufont.h"

static XIntc sIntc;
static XIic sIic;
XLlFifo audio_out_fifo, audio_in_fifo, cepstrum_fifo;

const int BTNC = 0x01;
const int BTNU = 0x02;
const int BTNL = 0x04;
const int BTNR = 0x08;
const int BTND = 0x10;

volatile unsigned int *buttons = (unsigned int*)XPAR_AXI_GPIO_0_BASEADDR;

const ivt_t ivt[] = {
		//IIC
		{XPAR_AXI_INTC_0_AXI_IIC_0_IIC2INTC_IRPT_INTR, (XInterruptHandler)XIic_InterruptHandler, &sIic}
};

void adau1761_init()
{
	// Enable clock
	fnAudioWriteToReg(0x4000, 0x07);

	// SLEWPD=1, ALCPD=1, DECPD=1, SOUTPD=1, INTPD=1, SINPD=1, SPPD=1
	fnAudioWriteToReg(0x40F9, 0x7F);
	// CLK1=0, CLK0=1
	fnAudioWriteToReg(0x40FA, 0x01);

	// MX3LM=1, MX3RM=0, MX3G1=0, MX3G2=0, MX3AUXG=0, MX5G3=3, MX6G3=0, LOUTVOL=63
	// MX4LM=0, MX4RM=1, MX4G1=0, MX4G2=0, MX4AUXG=0, MX5G4=0, MX6G4=3, ROUTVOL=63

	// LRCLK/LRPOL=falling edge, LRCLK/LRMOD=50%, BCLK/BPOL=falloing edge, LRDEL=1
	// SPSRS=0, LRMOD=0, BPOL=0, LRPOL=0, CHPF=0, MS=0
	fnAudioWriteToReg(0x4015, 0x00);
	// BPF=0, ADTDM=0, DATDM=0, MSBP=0, LRDEL=0
	fnAudioWriteToReg(0x4016, 0x00);
	// DAPAIR=0, DAOSR=0, ADOSR=0, CONVSR=0
	fnAudioWriteToReg(0x4017, 0x00);
	// MX3RM=0, MX3LM=1, MX3AUXG=0, MX3EN=1
	fnAudioWriteToReg(0x401C, 0x21);
	// MX3G2=0, MX3G1=0
	fnAudioWriteToReg(0x401D, 0x00);
	// MX4RM=1, MX4LM=0, MX4AUXG=0, MX4EN=1
	fnAudioWriteToReg(0x401E, 0x41);
	// MX4G2=0, MX4G1=0
	fnAudioWriteToReg(0x401F, 0x00);
	// MX5G4=0, MX5G3=10, MX5EN=1
	fnAudioWriteToReg(0x4020, 0x05);
	// MX6G4=01, MX6G3=0, MX6EN=1
	fnAudioWriteToReg(0x4021, 0x11);
	// MX7=0, MX7EN=0
	fnAudioWriteToReg(0x4022, 0x00);
	// LOUTVOL=63, LOUTM=1, LOMODE=0
	fnAudioWriteToReg(0x4025, 0xFE);
	// ROUTVOL=63, ROUTM=1, ROMODE=0
	fnAudioWriteToReg(0x4026, 0xFE);

	// HPBIAS=0, DACBIAS=0, PBIAS=0, PREN=1, PLEN=1
	fnAudioWriteToReg(0x4029, 0x03);
	// DACMONO=0, DACPOL=0,DEMPH=0, DACEN=3
	fnAudioWriteToReg(0x402A, 0x03);

	// SINRT=1
	fnAudioWriteToReg(0x40F2, 0x01);
}
#define PERIODSAMPLES 64
#define MCLK 10000000
#define SAMPLE_RATE 40000

void adau1761_i2s_read(u16 *left, u16 *right)
{
	while (XLlFifo_iRxOccupancy(&audio_in_fifo) == 0);
	XLlFifo_iRxGetLen(&audio_in_fifo);
	u32 word = XLlFifo_RxGetWord(&audio_in_fifo);

	// Some kind of off-by-one error in our verilog I2S module means that we must ignore the
	// highest bit of the sample, hence the shift left by one.
	*left = (word >> 16) << 1;
	*right = (word & 0xffff) << 1;
}

void adau1761_i2s_write(u16 left,u16 right) {
	while ( !XLlFifo_iTxVacancy(&audio_out_fifo) ) {
		// Printing to serial takes too many cycles
		//xil_printf("I2S FIFO full. Waiting ... \n\r");
	}
	XLlFifo_TxPutWord(&audio_out_fifo, (u32)((left << 16) | (right)));
	XLlFifo_iTxSetLen(&audio_out_fifo, 4);
}

// Send sample, as a float encoded IEE754 format
void cepstrum_send_sample_u32(u32 sample)
{
	while ( !XLlFifo_iTxVacancy(&cepstrum_fifo) );
	XLlFifo_TxPutWord(&cepstrum_fifo, sample);
	XLlFifo_iTxSetLen(&cepstrum_fifo, 4);
}

void cepstrum_send_sample_float(float sample)
{
	u32 *val = (u32*)&sample;
	cepstrum_send_sample_u32(*val);
}

void send_cepstrum_samples() {
	for (int i=0; i<cepstrum_input_length; i++)
	{
		cepstrum_send_sample_u32(cepstrum_input_floats[i]);
	}
}

// This fails to read all 1024 samples for some reason?
void receive_cepstrum_output() {
	for (int total=0; total<cepstrum_input_length;)
	{
		while (XLlFifo_iRxOccupancy(&cepstrum_fifo) == 0);
		int recvWords = XLlFifo_iRxGetLen(&cepstrum_fifo) / 4;
		u32 word = XLlFifo_RxGetWord(&cepstrum_fifo);
		xil_printf("%u\n", word);
		total++;
	}
}


int main(){
	int Status;

	print("TESTING 123\n");

	// Interrupts
	Status = fnInitInterruptController(&sIntc);
	if(Status != XST_SUCCESS) {
		xil_printf("Error initializing interrupts");
		return XST_FAILURE;
	}

	// I2C
	Status = fnInitIic(&sIic);
	if(Status != XST_SUCCESS) {
		xil_printf("Error initializing I2C controller");
		return XST_FAILURE;
	}

	fnEnableInterrupts(&sIntc, &ivt[0], sizeof(ivt)/sizeof(ivt[0]));

	// I2S FIFO
	XLlFifo_Config *pConfig = XLlFfio_LookupConfig(XPAR_AXI_FIFO_MM_S_0_DEVICE_ID);
	Status = XLlFifo_CfgInitialize(&audio_out_fifo, pConfig, pConfig->BaseAddress);
	if(XST_SUCCESS != Status) {
		xil_printf("Error initializing Output FIFO");
		return XST_FAILURE;
	}
	pConfig = XLlFfio_LookupConfig(XPAR_AXI_FIFO_MM_S_1_DEVICE_ID);
	Status = XLlFifo_CfgInitialize(&audio_in_fifo, pConfig, pConfig->BaseAddress);
	if(XST_SUCCESS != Status) {
		xil_printf("Error initializing Input FIFO");
		return XST_FAILURE;
	}

	// Cepstrum FIFO
	pConfig = XLlFfio_LookupConfig(XPAR_AXI_FIFO_MM_S_2_DEVICE_ID);
	Status = XLlFifo_CfgInitialize(&cepstrum_fifo, pConfig, pConfig->BaseAddress);
	if(XST_SUCCESS != Status) {
		xil_printf("Error initializing Cepstrum FIFO");
		return XST_FAILURE;
	}

	/*
	// Check for the Reset value
	Status = XLlFifo_Status(&audio_out_fifo);
	XLlFifo_IntClear(&audio_out_fifo,0xffffffff);
	Status = XLlFifo_Status(&audio_out_fifo);
	if(Status != 0) {
		xil_printf("Error initializing Output FIFO (3)");
		return XST_FAILURE;
	}
	*/

	xil_printf("Initialization OK\n");

	//adau1761_init();
	fnInitAudio();
	//fnSetHpOutput();
	fnSetLineOutput();
	fnSetMicInput();
	//fnSetLineInput();

	u8 data = 0xff;
	fnAudioReadFromReg(R0_CLOCK_CONTROL, &data);

	xil_printf("Data: %x\n", data);

    send_cepstrum_samples();

    xil_printf("Wait for completion...\n");

    // TODO: Fix cepstrum module so we know when the output is ready
    //while (Xil_In32(XPAR_CEPSTRUM_PITCH_DETEC_0_BASEADDR + 4) == 0);

    xil_printf("Completed! Value: %d\n", Xil_In32(XPAR_CEPSTRUM_PITCH_DETEC_0_BASEADDR));

    //receive_cepstrum_output();

    for (;;)
    {
    	if ((*buttons) & BTNC)
    	{
    		xil_printf("Recording sample...\n");
			for (int i=0; i<cepstrum_input_length; i++)
			{
				u16 l, r;
				adau1761_i2s_read(&l, &r);
				cepstrum_send_sample_float((float)l);
				while ( !XLlFifo_iTxVacancy(&cepstrum_fifo) );
				XLlFifo_TxPutWord(&cepstrum_fifo, cepstrum_input_floats[i]);
				XLlFifo_iTxSetLen(&cepstrum_fifo, 4);
			}
		    xil_printf("Completed! Value: %d\n", Xil_In32(XPAR_CEPSTRUM_PITCH_DETEC_0_BASEADDR));
		}
    }

    // Forward audio input to outputk
    for(;;) {
    	for (int i=0; i<PERIODSAMPLES; i++)
    	{
    		u16 l, r;
    		adau1761_i2s_read(&l, &r);
    		adau1761_i2s_write(l, r);
    	}
    }

	return 0;
}
